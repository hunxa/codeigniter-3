name: CodeIgniter 3 CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate CodeIgniter 3 Application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install PHP and Extensions
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üì¶ Installing PHP and Required Extensions"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        sudo apt-get update -qq
        sudo apt-get install -y \
          php \
          php-cli \
          php-mbstring \
          php-intl \
          php-mysqli \
          php-gd \
          php-zip \
          php-curl \
          php-xml \
          php-json \
          php-bcmath
        
        echo ""
        echo "‚úì PHP installed successfully"
        php -v
        echo ""

    - name: Verify PHP Installation
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üîç Verifying PHP Configuration"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        php -m | grep -E "(mbstring|intl|mysqli|gd|zip|curl|xml|json)" || {
          echo "‚ùå Required PHP extensions not found"
          exit 1
        }
        
        echo "‚úì All required PHP extensions are available"
        echo ""

    - name: Check CodeIgniter Directory Structure
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìÅ Checking CodeIgniter Structure"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        # Check main directories
        if [ ! -d "application" ]; then
          echo "‚ùå 'application' directory not found"
          exit 1
        fi
        echo "‚úì application directory exists"
        
        if [ ! -d "system" ]; then
          echo "‚ùå 'system' directory not found"
          exit 1
        fi
        echo "‚úì system directory exists"
        
        if [ ! -f "public/index.php" ]; then
          echo "‚ùå 'public/index.php' not found"
          exit 1
        fi
        echo "‚úì public/index.php exists"
        
        # Check application subdirectories
        required_dirs=("controllers" "models" "views" "config" "core" "helpers" "libraries")
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "application/$dir" ]; then
            echo "‚ö†Ô∏è  application/$dir directory not found"
          else
            echo "‚úì application/$dir exists"
          fi
        done
        
        # Check writable directories
        writable_dirs=("cache" "logs")
        for dir in "${writable_dirs[@]}"; do
          if [ ! -d "application/$dir" ]; then
            echo "‚ö†Ô∏è  application/$dir directory not found (writable directory)"
          else
            echo "‚úì application/$dir exists"
          fi
        done
        
        echo ""

    - name: Validate Required Config Files
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "‚öôÔ∏è  Validating Configuration Files"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        config_files=(
          "application/config/config.php"
          "application/config/database.php"
          "application/config/routes.php"
          "application/config/autoload.php"
          "application/config/constants.php"
        )
        
        all_found=true
        for file in "${config_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå $file not found"
            all_found=false
          else
            echo "‚úì $file exists"
          fi
        done
        
        if [ "$all_found" = false ]; then
          exit 1
        fi
        
        echo ""

    - name: PHP Syntax Check - Config Files
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üîç Checking Config Files Syntax"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        error_found=false
        if [ -d "application/config" ]; then
          for file in application/config/*.php; do
            if [ -f "$file" ]; then
              if ! php -l "$file" > /dev/null 2>&1; then
                echo "‚ùå Syntax error in: $file"
                php -l "$file"
                error_found=true
              else
                echo "‚úì $file"
              fi
            fi
          done
        fi
        
        if [ "$error_found" = true ]; then
          exit 1
        fi
        
        echo ""

    - name: PHP Syntax Check - Controllers
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üéÆ Checking Controllers Syntax"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        error_found=false
        controller_count=0
        
        if [ -d "application/controllers" ]; then
          while IFS= read -r -d '' file; do
            controller_count=$((controller_count + 1))
            if ! php -l "$file" > /dev/null 2>&1; then
              echo "‚ùå Syntax error in: $file"
              php -l "$file"
              error_found=true
            else
              echo "‚úì $file"
            fi
          done < <(find application/controllers -name "*.php" -print0)
        fi
        
        echo ""
        echo "Total controllers checked: $controller_count"
        
        if [ "$error_found" = true ]; then
          exit 1
        fi
        
        echo ""

    - name: PHP Syntax Check - Models
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìä Checking Models Syntax"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        error_found=false
        model_count=0
        
        if [ -d "application/models" ]; then
          while IFS= read -r -d '' file; do
            model_count=$((model_count + 1))
            if ! php -l "$file" > /dev/null 2>&1; then
              echo "‚ùå Syntax error in: $file"
              php -l "$file"
              error_found=true
            else
              echo "‚úì $file"
            fi
          done < <(find application/models -name "*.php" -print0)
        fi
        
        echo ""
        echo "Total models checked: $model_count"
        
        if [ "$error_found" = true ]; then
          exit 1
        fi
        
        echo ""

    - name: PHP Syntax Check - Libraries
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìö Checking Libraries Syntax"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        error_found=false
        library_count=0
        
        if [ -d "application/libraries" ]; then
          while IFS= read -r -d '' file; do
            library_count=$((library_count + 1))
            if ! php -l "$file" > /dev/null 2>&1; then
              echo "‚ùå Syntax error in: $file"
              php -l "$file"
              error_found=true
            else
              echo "‚úì $file"
            fi
          done < <(find application/libraries -name "*.php" -print0)
        fi
        
        echo ""
        echo "Total libraries checked: $library_count"
        
        if [ "$error_found" = true ]; then
          exit 1
        fi
        
        echo ""

    - name: PHP Syntax Check - Helpers
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üõ†Ô∏è  Checking Helpers Syntax"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        error_found=false
        helper_count=0
        
        if [ -d "application/helpers" ]; then
          while IFS= read -r -d '' file; do
            helper_count=$((helper_count + 1))
            if ! php -l "$file" > /dev/null 2>&1; then
              echo "‚ùå Syntax error in: $file"
              php -l "$file"
              error_found=true
            else
              echo "‚úì $file"
            fi
          done < <(find application/helpers -name "*.php" -print0)
        fi
        
        echo ""
        echo "Total helpers checked: $helper_count"
        
        if [ "$error_found" = true ]; then
          exit 1
        fi
        
        echo ""

    - name: PHP Syntax Check - Core Extensions
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üîß Checking Core Extensions Syntax"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        error_found=false
        core_count=0
        
        if [ -d "application/core" ]; then
          while IFS= read -r -d '' file; do
            core_count=$((core_count + 1))
            if ! php -l "$file" > /dev/null 2>&1; then
              echo "‚ùå Syntax error in: $file"
              php -l "$file"
              error_found=true
            else
              echo "‚úì $file"
            fi
          done < <(find application/core -name "*.php" -print0)
        fi
        
        echo ""
        echo "Total core files checked: $core_count"
        
        if [ "$error_found" = true ]; then
          exit 1
        fi
        
        echo ""

    - name: Security Checks
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üîí Running Security Checks"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        security_issues=false
        
        # Check for config files in public directories
        echo "Checking for exposed config files..."
        if [ -f "assets/config.php" ] || [ -f "public/config.php" ]; then
          echo "‚ùå Config file found in public directory!"
          security_issues=true
        else
          echo "‚úì No config files in public directories"
        fi
        
        # Check for .env files
        echo "Checking for .env files..."
        if [ -f ".env" ]; then
          echo "‚ö†Ô∏è  .env file found in repository"
          if grep -q "DB_PASSWORD" .env 2>/dev/null; then
            echo "‚ö†Ô∏è  .env contains database credentials"
          fi
        else
          echo "‚úì No .env file in repository"
        fi
        
        # Check for debug mode
        echo "Checking for debug mode..."
        if grep -q "['\"]\s*log_threshold['\"]\s*.*=>\s*4" application/config/config.php 2>/dev/null; then
          echo "‚ö†Ô∏è  Debug mode (log_threshold = 4) detected"
        else
          echo "‚úì Debug mode not detected"
        fi
        
        # Check for hardcoded credentials
        echo "Checking for hardcoded database credentials..."
        if grep -rn "password.*=.*['\"][^'\"]\{3,\}['\"]" application/config/database.php 2>/dev/null | grep -v "''" | grep -v '""' | grep -v "password.*=.*['\"]\s*['\"]"; then
          echo "‚ö†Ô∏è  Possible hardcoded database password detected"
        else
          echo "‚úì No obvious hardcoded passwords found"
        fi
        
        # Check for index.php in URLs
        echo "Checking for index.php in URLs..."
        if grep -q "['\"]\s*index_page['\"]\s*.*=>\s*['\"]index\.php['\"]" application/config/config.php 2>/dev/null; then
          echo "‚ö†Ô∏è  index.php still in URL configuration"
        else
          echo "‚úì Clean URLs configured"
        fi
        
        # Check .htaccess protection for sensitive directories
        echo "Checking .htaccess protection..."
        protected_dirs=("application/cache" "application/logs" "application/config")
        for dir in "${protected_dirs[@]}"; do
          if [ -d "$dir" ]; then
            if [ ! -f "$dir/.htaccess" ] && [ ! -f "$dir/index.html" ]; then
              echo "‚ö†Ô∏è  $dir lacks .htaccess or index.html protection"
            else
              echo "‚úì $dir is protected"
            fi
          fi
        done
        
        echo ""
        if [ "$security_issues" = true ]; then
          echo "‚ùå Critical security issues found!"
          exit 1
        fi

    - name: Check for Common Issues
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üîç Checking for Common CodeIgniter Issues"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        # Check for short PHP tags
        echo "Checking for short PHP tags..."
        if grep -rn "<?" application/ --include="*.php" | grep -v "<?php" | grep -v "<?=" | head -5; then
          echo "‚ö†Ô∏è  Short PHP tags found (may cause issues)"
        else
          echo "‚úì No short PHP tags found"
        fi
        
        # Check for trailing whitespace in PHP files
        echo "Checking for trailing whitespace after closing PHP tags..."
        if grep -rn "?>\s\+$" application/ --include="*.php" | head -5; then
          echo "‚ö†Ô∏è  Trailing whitespace after ?> found"
        else
          echo "‚úì No trailing whitespace issues"
        fi
        
        # Check for BOM in files
        echo "Checking for BOM (Byte Order Mark)..."
        if grep -rl $'\xEF\xBB\xBF' application/ --include="*.php" 2>/dev/null | head -5; then
          echo "‚ö†Ô∏è  BOM found in PHP files"
        else
          echo "‚úì No BOM detected"
        fi
        
        # Check for var_dump or print_r (debugging code)
        echo "Checking for debugging functions..."
        if grep -rn "\(var_dump\|print_r\|var_export\)" application/ --include="*.php" | grep -v "//.*var_dump" | head -5; then
          echo "‚ö†Ô∏è  Debugging functions found in code"
        else
          echo "‚úì No debugging functions found"
        fi
        
        # Check for die() or exit() statements
        echo "Checking for die/exit statements..."
        if grep -rn "\(die(\|exit(\)" application/controllers/ --include="*.php" 2>/dev/null | head -5; then
          echo "‚ö†Ô∏è  die/exit statements found in controllers"
        else
          echo "‚úì No die/exit statements in controllers"
        fi
        
        echo ""

    - name: Check File Permissions Requirements
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìù Checking Writable Directories"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        writable_dirs=("application/cache" "application/logs")
        
        for dir in "${writable_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "‚úì $dir exists"
            
            # Check for protection files
            if [ -f "$dir/.htaccess" ]; then
              echo "  ‚úì .htaccess protection found"
            elif [ -f "$dir/index.html" ]; then
              echo "  ‚úì index.html protection found"
            else
              echo "  ‚ö†Ô∏è  No protection file (.htaccess or index.html)"
            fi
          else
            echo "‚ö†Ô∏è  $dir not found"
          fi
        done
        
        # Check for uploads directory
        if [ -d "uploads" ]; then
          echo "‚úì uploads directory exists"
          if [ ! -f "uploads/.htaccess" ] && [ ! -f "uploads/index.html" ]; then
            echo "  ‚ö†Ô∏è  uploads directory lacks protection"
          fi
        fi
        
        echo ""

    - name: Generate Code Statistics
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìä Code Statistics"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        # Count files
        controllers=$(find application/controllers -name "*.php" 2>/dev/null | wc -l)
        models=$(find application/models -name "*.php" 2>/dev/null | wc -l)
        views=$(find application/views -name "*.php" 2>/dev/null | wc -l)
        libraries=$(find application/libraries -name "*.php" 2>/dev/null | wc -l)
        helpers=$(find application/helpers -name "*.php" 2>/dev/null | wc -l)
        core=$(find application/core -name "*.php" 2>/dev/null | wc -l)
        
        total=$((controllers + models + libraries + helpers + core))
        
        echo "Controllers:  $controllers"
        echo "Models:       $models"
        echo "Views:        $views"
        echo "Libraries:    $libraries"
        echo "Helpers:      $helpers"
        echo "Core:         $core"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Total Files:  $total (excluding views)"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        # Count lines of code (approximate)
        if command -v wc &> /dev/null; then
          echo ""
          echo "Lines of Code (approximate):"
          app_lines=$(find application/ -name "*.php" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}')
          echo "Application:  $app_lines lines"
        fi
        
        echo ""

    - name: Final Summary
      if: always()
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "‚úÖ CodeIgniter 3 CI Validation Complete"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Repository: ${{ github.repository }}"
        echo "Branch:     ${{ github.ref }}"
        echo "Commit:     ${{ github.sha }}"
        echo "Author:     ${{ github.actor }}"
        echo "Workflow:   ${{ github.workflow }}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo ""

    - name: Failure Notification
      if: failure()
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "‚ùå CI Validation Failed"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Please review the errors above and fix them"
        echo "before merging to the main branch."
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
